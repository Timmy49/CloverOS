# -*- coding: utf-8 -*-
"""CloverOS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nKdgh6wV-Es3tb2qzH2h41xSrFs-tHDT

1. **Guessing Game**
2. **Lottery Game**
3. **Calculator**
4. **To - Do**
5. **Notes**
6. **Help**
7. **Settings**
"""

# Guessing Game
def guessing_game():
  import random
  number = random.randint(1, 10)
  while True:
    # validate the input
    try:
      guess = int(input("\nGuess a number between 1 and 10 ( 0 to exit )\nAnswer: "))
    except ValueError:
      print("Invalid input.")
      continue

    # guessing the number
    if guess == 0:
      break
    elif guess > number:
      print("Too high!")
    elif guess < number:
      print("Too low!")
    else:
      print("You guessed correctly!")
      break


# Lottery Game
def lottery_game():
  import random
  numbers = [random.randint(1, 5), random.randint(6, 10), random.randint(11, 15), random.randint(16, 20), random.randint(21, 25), random.randint(26, 30)]
  winning_number = (numbers[random.randint(0, 2)])
  try:
    entry_number = int(input("\nWhich is the lottery number?\n" + str(numbers) + "\nAnswer: "))
    if entry_number == winning_number:
      print("You won!")
    else:
      print("You lost! Lottery number was " + str(winning_number))
  except ValueError:
    print("Invalid input.")


# Calculator
def calculator():
  while True:
    operation = input("\nWhat order of operation would you like to perform? ( Addition, Subtraction, Multiplication, Division )\nAnswer: ").lower()
    if operation == "addition":
      try:
        number1 = int(input("\nWhat is the first number?\nAnswer: "))
        number2 = int(input("\nWhat is the second number?\nAnswer: "))
        print(str(number1) + " + " + str(number2) + " = " + str(number1 + number2))
      except ValueError:
        print("\nInvalid Input.")
    elif operation == "subtraction":
      try:
        number1 = int(input("\nWhat is the first number?\nAnswer: "))
        number2 = int(input("\nWhat is the second number?\nAnswer: "))
        print(str(number1) + " - " + str(number2) + " = " + str(number1 - number2))
      except ValueError:
        print("\nInvalid Input.")
    elif operation == "multiplication":
      try:
        number1 = int(input("\nWhat is the first number?\nAnswer: "))
        number2 = int(input("\nWhat is the second number?\nAnswer: "))
        print(str(number1) + " x " + str(number2) + " = " + str(number1 * number2))
      except ValueError:
        print("\nInvalid Input.")
    elif operation == "division":
      try:
        number1 = int(input("\nWhat is the first number?\nAnswer: "))
        number2 = int(input("\nWhat is the second number?\nAnswer: "))
        print(str(number1) + " รท " + str(number2) + " = " + str(number1 / number2))
      except ValueError:
        print("\nInvalid Input.")
    elif operation == "exit":
      break
    else:
      print("\nInvalid Operation.")


# To Do
tasks = []
def todo():
  global tasks
  while True:
    print("\nTasks:\n" + str(tasks))
    if tasks == []:
      print("\nNo tasks currently.")
    todo_action = input("\nWhat would you like to do? \n1. Add Task\n2. Remove Task\n3. Export Tasks\n4. Exit\n( Type the command )\nAnswer: ").lower()
    if todo_action == "add task":
      add_task = input("\nWhat task would you like to add?\nAnswer: ").lower()
      tasks.append(add_task)
      print("\nTask Added.")
    elif todo_action == "remove task":
      remove_task = input("\nWhat task would you like to mark as done?\nAnswer: ").lower()
      try:
        tasks.remove(remove_task)
        print("\nTask Removed.")
      except ValueError:
        print("\nInvalid Task.")
    elif todo_action == "export tasks":
      todo_file_name = input("\nName your todo list file.\nAnswer: ")
      todo_file = open(todo_file_name, 'w')
      todo_file.write(str(tasks))
      todo_file.close()
      print("\nTasks Exported.")
    elif todo_action == "exit":
      break
    else:
      print("\nInvalid Action.")
# Notes
notes = []
def notesapp():
  while True:
    global notes
    if notes == []:
      print("\nNo notes currently.")
    else:
      print("\nNotes:\n")
      for note in notes:
        print(note)
    notes_action = input("\nWhat would you like to do? \n1. Add Note\n2. Remove All\n3. Exit\n( Type the command )\nAnswer: ").lower()
    if notes_action == "add note":
      add_note = input("\nWhat note would you like to add?\nAnswer: ").lower()
      notes.append(add_note)
      print("\nNote Added.")
    elif notes_action == "remove all":
      notes.clear()
      print("\nAll notes removed.")
    elif notes_action == "exit":
      break
    else:
      print("\nInvalid Action.")


# Settings
developer_mode = False
def settingsapp():
  global developer_mode
  while True:
    settings_action = input("\nWhat would you like to do? \n1. Turn on / off developer mode ( Type: 'developer')\n2. Credits\n3. Exit \nAnswer: ").lower()
    if settings_action == "developer":
      if developer_mode == True:
        developer_mode = False
        print("\nDeveloper Mode Turned Off.")
      else:
        developer_mode = True
        print("\nDeveloper Mode Turned On.")
    elif settings_action == "exit":
      break
    elif settings_action == "credits":
      print("\nDeveloper: Timmy\nTesters: Jayaprakash Etash, Avisha Murty, Timmy\nThank you Gemini and ChatGPT for helping me study python. Must read: Python Essentials; for dummies")
    else:
      print("\nInvalid Action.")


# Help
def helpapp():
  print("\nApplications:\n1. Guessing Game\n2. Lottery Game\n3. Bonnet\n4. Calculator\n5. Todo\n6. Notes\n7. Settings\n8. Help\n9. Exit\n\nType the name of the application to open. Most of the time, the command is simple and requires common sense.")

"""**Bonnet Game**"""

# Bonnet Game
def bonnet():
  # Game Status
  game_status = input("\nNew game or Continue game?\nAnswer: ").lower()
  if game_status == "new game":
    bonnet_new_game()
  elif game_status == "continue game":
    bonnet_import_save()
  else:
    if game_status == "exit":
      print("\nExit")
    else:
      print("\nInvalid Action.")
# Bonnet - New Game
def bonnet_new_game():
  global player_x, player_y, inventory_str, progress_str, inventory_gui, progress_gui
  player_x = 1
  player_y = 1
  inventory_str = "0"
  progress_str = "0"
  inventory_gui = []
  progress_gui = []
  location_text()
  location_action()
# Bonnet - Continued Game
def bonnet_import_save():
  save_option = input("\n\nSelect a import option: File / Character String ( File / String )\nAnswer: ").lower()
  global player_x, player_y, inventory_str, progress_str, developer_mode, progress_gui, inventory_gui
  if save_option == "file":
    try:
      save_file_open = open('bonnet_savefile_cloverOS.txt', 'r')
      save_file_data = save_file_open.read()
      save_file_open.close()
      player_x = int(save_file_data[0])
      player_y = int(save_file_data[1])

      # Extract inventory + recognising item
      inventory_str = str(save_file_data[2])
      try:
        if inventory_str == "0":
          inventory_gui = []
        elif inventory_str == "1":
          inventory_gui = ["key"]
        elif inventory_str == "2":
          inventory_gui = ["shovel"]
        elif inventory_str == "3":
          inventory_gui = ["cpu card"]
        elif inventory_str == "4":
          inventory_gui = ["battery"]
        elif inventory_str == "5":
          inventory_gui = ["key", "cpu card"]
        elif inventory_str == "6":
          inventory_gui = ["key", "battery"]
        elif inventory_str == "7":
          inventory_gui = ["key", "shovel"]
        elif inventory_str == "8":
          inventory_gui = ["key", "cpu card", "shovel"]
        elif inventory_str == "9":
          inventory_gui = ["key", "battery, shovel"]
        elif inventory_str == "a":
          inventory_gui = ["key", "cpu card", "battery"]
        elif inventory_str == "b":
          inventory_gui = ["key", "cpu card", "battery", "shovel"]
        elif inventory_str == "c":
          inventory_gui = ["shovel", "battery"]
        elif inventory_str == "d":
          inventory_gui = ["shovel", "cpu card"]
        elif inventory_str == "e":
          inventory_gui = ["shovel", "battery", "cpu card"]
        elif inventory_str == "f":
          inventory_gui = ["battery", "cpu card"]
        else:
          print("Invlid save file. Try again.")
          bonnet_import_save()
      except (ValueError, IndexError):
        print("\nInvalid save file. Try again.")
        bonnet_import_save()

      # Extract progress + recognising progress
      progress_str = int(save_file_data[3])
      try:
        if progress_str == 0:
          progress_gui = []
        elif progress_str == 1:
          progress_gui = ["shovelyes"]
        else:
          print("\nInvlid save file. Try again.")
          bonnet_import_save()
      except (ValueError, IndexError):
        print("\nInvalid save file. Try again.")
        bonnet_import_save()

      print("\nYour save:\n" + str(player_x) + str(player_y) + str(inventory_gui) + str(progress_gui))
      player_x = int(player_x)
      player_y = int(player_y)
      location_text()
      location_action()
    except FileNotFoundError:
      print("\nNo save file found. Starting new game...")
      bonnet_new_game()
    except IndexError:
      print("\nInvalid save file. Try again.")
      bonnet_import_save()
  elif save_option == "string":
    save_str_open = input("\n\nEnter your save string.\nAnswer: ")
    try:
      save_file_data = save_str_open
      player_x = int(save_file_data[0])
      player_y = int(save_file_data[1])
      inventory_str = str(save_file_data[2])
      try:
        if inventory_str == "0":
          inventory_gui = []
        elif inventory_str == "1":
          inventory_gui = ["key"]
        elif inventory_str == "2":
          inventory_gui = ["shovel"]
        elif inventory_str == "3":
          inventory_gui = ["cpu card"]
        elif inventory_str == "4":
          inventory_gui = ["battery"]
        elif inventory_str == "5":
          inventory_gui = ["key", "cpu card"]
        elif inventory_str == "6":
          inventory_gui = ["key", "battery"]
        elif inventory_str == "7":
          inventory_gui = ["key", "shovel"]
        elif inventory_str == "8":
          inventory_gui = ["key", "cpu card", "shovel"]
        elif inventory_str == "9":
          inventory_gui = ["key", "battery, shovel"]
        elif inventory_str == "a":
          inventory_gui = ["key", "cpu card", "battery"]
        elif inventory_str == "b":
          inventory_gui = ["key", "cpu card", "battery", "shovel"]
        elif inventory_str == "c":
          inventory_gui = ["shovel", "battery"]
        elif inventory_str == "d":
          inventory_gui = ["shovel", "cpu card"]
        elif inventory_str == "e":
          inventory_gui = ["shovel", "battery", "cpu card"]
        else:
          inventory_gui = ["battery", "cpu card"]
      except (ValueError, IndexError):
        print("\nInvalid save string. Try again.")
        bonnet_import_save()

      progress_str = int(save_file_data[3])
      try:
        if progress_str == 0:
          progress_gui = []
        elif progress_str == 1:
          progress_gui = ["shovelyes"]
      except (ValueError, IndexError):
        print("\nInvalid save string. Try again.")
        bonnet_import_save()

      print("\nYour save:\n" + str(player_x) + str(player_y) + str(inventory_gui) + str(progress_gui))
      player_x = int(player_x)
      player_y = int(player_y)
      location_text()
      location_action()
    except IndexError:
      print("\nInvalid save string. Try again.")
      bonnet_import_save()
    except ValueError:
      print("\nInvalid save string. Try again.")
      bonnet_import_save()
  elif save_option == "exit":
    print("\nExit")
  else:
    print("\nInvalid Action.")

# Bonnet - Location Text
def location_text():
  global player_x, player_y, progress_gui, developer_mode
  # Add \n before every location text!!!
  # Y = 1
  if player_x == 1 and player_y == 1:
    print("\nYou find yourself standing in the middle of a dirt road. The road leads far off to the east. There are tall palm trees on the side of the walkway.")
    if developer_mode == True:
      print("\nCurrent location: X = " + str(player_x) + ", Y = " + str(player_y))
  elif player_x == 2 and player_y == 1:
    print("\nThe ground is much softer here. The road leads to the east and west.")
    if developer_mode == True:
      print("\nCurrent location: X = " + str(player_x) + ", Y = " + str(player_y))
  elif player_x == 3 and player_y == 1:
    print("\nThere is a large pile of metal scraps here. The road leads to the east and west. You notice another small road leading south.")
    if developer_mode == True:
      print("\nCurrent location: X = " + str(player_x) + ", Y = " + str(player_y))
  # Y = 2
  elif player_x == 3 and player_y == 2:
    print("\nThere is a large pile of metal scraps here. ")
    has_shovel = "shovelyes" in progress_gui
    if has_shovel == True:
      print("\nThere is a shovel in the pile of metal scraps.")
    if developer_mode == True:
      print("\nCurrent location: X = " + str(player_x) + ", Y = " + str(player_y))
  # Non - Existent Text
  else:
    print("\nThere is no description for this location yet. Current location: X = " + str(player_x) + ", Y = " + str(player_y) + ".")
# Bonnet - Action + Game Engine
def location_action():
  global player_x, player_y, inventory_gui, progress_gui, inventory_str, progress_str, bonnet_action, developer_mode
  while True:
    bonnet_action = input("\nWhat would you like to do?\nAnswer: ").lower()
    # Movement
    # Important Note: Player starts bottom left of map. North is + 1Y, East is + 1X
    if bonnet_action == "east":
      player_x += 1
      location_text()
      location_action()
    elif bonnet_action == "west":
      player_x -= 1
      location_text()
      location_action()
    elif bonnet_action == "south":
      player_y -= 1
      location_text()
      location_action()
    elif bonnet_action == "north":
      player_y += 1
      location_text()
      location_action()
    # Inventory Command
    elif bonnet_action == "inventory":
      print(str(inventory_gui))
      location_text()
      location_action()


    # Save Command
    elif bonnet_action == "save":
      save_method = input("\n\nSelect a save option: File / Character String ( File / String )\nAnswer: ").lower()
      if save_method == "file":
        try:
          save_file = open('bonnet_savefile_cloverOS.txt', 'r+')
          save_file.write(str(player_x) + str(player_y) + str(inventory_str) + str(progress_str))
          save_file.close()
          print("\nSave file updated.")
          location_text()
          location_action()
        except FileNotFoundError:
          print("\nNo save file found. Creating new save file...")
          save_file = open('bonnet_savefile_cloverOS.txt', 'w')
          save_file.write(str(player_x) + str(player_y) + str(inventory_str) + str(progress_str))
          save_file.close()
          print("\nSave file created.")
          location_text()
          location_action()
      elif save_method == "string":
        print("\nYour save:\n" + str(player_x) + str(player_y) + str(inventory_str) + str(progress_str))
        location_text()
        location_action()
      elif save_method == "exit":
        location_text()
        location_action()
      else:
        print("\nInvalid Action.")
        location_text()
        location_action()


    # Exit
    elif bonnet_action == "exit":
      home_screen()
      break


    # Admin Command
    elif bonnet_action == "admin":
      if developer_mode == True:
        print("\nGame Status:\n\nPosition:" + str(player_x) + " " + str(player_y) + "\nInventory_GUI:" + str(inventory_gui) + "\nProgress_GUI:" + str(progress_gui) + "\nInventory_STR:" + str(inventory_str) + "\nProgress_STR:" + str(progress_str) + "\nItem STR List:\n1k2s3b4c5ks6kb7kc8ksb9kscAkbc\nBksbcCsbDscEscbFbc\nProgress STR List:\n1shovelyes")
        add_type = input("\nItem / Progress ( I / P )\nAnswer: ").lower()
        if add_type == "i":
          add_item = str(input("\nItem? \n1k2s3b4c5ks6kb7kc8ksb9kscAkbc\nBksbcCsbDscEscbFbc\nAnswer: "))
          try:
            if add_item == "0":
              inventory_gui = []
            elif add_item == "1":
              inventory_gui = ["key"]
            elif add_item == "2":
              inventory_gui = ["shovel"]
            elif add_item == "3":
              inventory_gui = ["cpu card"]
            elif add_item == "4":
              inventory_gui = ["battery"]
            elif add_item == "5":
              inventory_gui = ["key", "cpu card"]
            elif add_item == "6":
              inventory_gui = ["key", "battery"]
            elif add_item == "7":
              inventory_gui = ["key", "shovel"]
            elif add_item == "8":
              inventory_gui = ["key", "cpu card", "shovel"]
            elif add_item == "9":
              inventory_gui = ["key", "battery, shovel"]
            elif add_item == "a":
              inventory_gui = ["key", "cpu card", "battery"]
            elif add_item == "b":
              inventory_gui = ["key", "cpu card", "battery", "shovel"]
            elif add_item == "c":
              inventory_gui = ["shovel", "battery"]
            elif add_item == "d":
              inventory_gui = ["shovel", "cpu card"]
            elif add_item == "e":
              inventory_gui = ["shovel", "battery", "cpu card"]
            elif add_item == "f":
              inventory_gui = ["battery", "cpu card"]
            else:
              print("\nTf you doing thats not valid\nYou're probably not even the developer")
              location_text()
              location_action()
          except ValueError:
            print("\nTf you doing thats not valid\nYou're probably not even the developer")
            location_text()
            location_action()
          inventory_str = add_item
          print("\nInventory set. Current inventory:" + str(inventory_gui))
          location_text()
          location_action()
        elif add_type == "p":
          add_progress = int(input("\nProgress? \n1shovelyes\nAnswer: "))
          try:
            if add_progress == 0:
              progress_gui = []
            elif add_progress == 1:
              progress_gui = ["shovelyes"]
            else:
              print("\nTf you doing thats not valid\nYou're probably not even the developer")
              location_text()
              location_action()
          except (ValueError, IndexError):
            print("\nTf you doing thats not valid\nYou're probably not even the developer")
            location_text()
            location_action()
          progress_str = add_progress
          print("\nComplete. Current progress:" + str(progress_gui))
          location_text()
          location_action()
        else:
          print("Invalid Action. ( I / P)")
          location_text()
          location_action()
      else:
        print("\nInvalid Action. ( Turn on developer mode )")
        location_text()
        location_action()


    # Progress
    elif bonnet_action == "progress":
      if developer_mode == True:
        print(str(progress_gui))
        location_text()
        location_action()
      else:
        print("\nInvalid Action. ( Turn on developer mode )")
        location_text()
        location_action()


    # Invalid Command
    else:
      print("\nInvalid Action.")
      location_text()
      location_action()

"""Application Selection"""

# System OS
import sys
import time
def home_screen():
  while True:
    try:
      application = input("\nSelect an application\nAnswer: ").lower()
    except KeyboardInterrupt:
      exit_confirmation = input("\n\nAre you sure you want to exit? (y/n)\nAnswer: ").lower()
      if exit_confirmation == "y":
        break
      else:
        continue
    if application == "guessing game":
      guessing_game()
    elif application == "lottery game":
      lottery_game()
    elif application == "bonnet":
      bonnet()
    elif application == "calculator":
      calculator()
    elif application == "todo":
      todo()
    elif application == "help":
      helpapp()
    elif application == "notes":
      notesapp()
    elif application == "settings":
      settingsapp()
    elif application == "exit":
      exit_confirmation = input("\n\nAre you sure you want to exit? ( y / n )\nAnswer: ").lower()
      if exit_confirmation == "y":
        break
      else:
        continue
    else:
      print("\nInvalid Application.")

def type_text(text, delay=0.05):
  for char in text:
    sys.stdout.write(char)
    sys.stdout.flush()
    time.sleep(delay)
  print()

# BIOS
skip_bios = input("developer?")
if skip_bios == " ":
  home_screen()
else:
  time.sleep(1)
  type_text("\nPowering on...")
  time.sleep(1.4)
  type_text("\nWelcome to Clover OS, an operating system powered by python script. To start, select an application.")
  time.sleep(0.4)
  home_screen()